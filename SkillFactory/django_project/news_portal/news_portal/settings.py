"""
Django settings for news_portal project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-h*giq8)3v1he02&9111fyawo#xnon@4c8v8i&ya_44*(&9t4=0'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'modeltranslation', # Приложение для перевода моделей
    'django_apscheduler', # Приложение для выполнения периодических задач
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',

    # добавление приложений библиотеки allauth.
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google', # Добавление стороннего сервиса для авторизации через Google.
    'allauth.socialaccount.providers.yandex', # Добавление стороннего сервиса для авторизации через Яндекс.

    'news.apps.NewsConfig',
    'accounts',
    'fpages',
    'django_filters',
    'sign',
    'protect',
]

SITE_ID = 1

LOGIN_URL = '/accounts/login/'

LOGIN_REDIRECT_URL = '/posts'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'news.middlewares.TimezoneMiddleware',
]

ROOT_URLCONF = 'news_portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'news_portal.wsgi.application'

LANGUAGES = [
    ('en-us', 'English'),
    ('ru', 'Русский'),
]


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Asia/Yekaterinburg'

USE_I18N = True

USE_TZ = True

# New
LOCALE_PATHS = [
    os.path.join(BASE_DIR / 'locale')
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / 'static',]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

ACCOUNT_FORMS = {'signup': 'sign.models.BasicSignupForm'}

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
#ACCOUNT_EMAIL_VERIFICATION = 'none'

# Настройки почтового сервера.
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.yandex.ru'  # Адрес сервера Яндекс-почты.
EMAIL_PORT = 465  # порт smtp сервера.
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')  # Имя пользователя сохранено в переменной окружения.
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')  # пароль от почты также сохранён в переменную окружения.
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER+'@yandex.ru'
EMAIL_USE_SSL = True  # Яндекс использует ssl.

SITE_URL = 'http://127.0.0.1:8000'

# формат даты, которую будет воспринимать задачник
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"

# если задача не выполняется за 25 секунд, то она автоматически снимается.
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Секунд

# Настрока подключения Celery к Redis через cloud.redis.io
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL') # Значение сохранено в переменной окружения.
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND') # Значение сохранено в переменной окружения.
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'


"""
Настройка кэширования через внешний сервер Redis/

""" # Словарь CACHES с настройками кеширования.
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": os.getenv("LOCATION"), # Данные сохранены в переменную окружения.
    }
}

"""
Добавляем настройки логгирования.
"""
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        # console_debug: для вывода в консоль сообщений уровня DEBUG и выше.
        'console_debug': {
            'format': '{asctime} {levelname} {message}',
            'style': '{',
        },
        # console_warning: для вывода в консоль сообщений уровня WARNING и выше с указанием пути.
        'console_warning': {
            'format': '{asctime} {levelname} {pathname} {message}',
            'style': '{',
        },
        # console_error: для вывода в консоль сообщений уровня ERROR и выше с указанием пути и стэка ошибки.
        'console_error': {
            'format': '{asctime} {levelname} {pathname} {message}\n{exc_info}',
            'style': '{',
        },
        # file_general: для записи в файл general.log сообщений уровня INFO и выше.
        'file_general': {
            'format': '{asctime} {levelname} {module} {message}',
            'style': '{',
        },
        # file_errors: для записи в файл errors.log сообщений уровня ERROR и выше с указанием пути и стэка ошибки.
        'file_errors': {
            'format': '{asctime} {levelname} {pathname} {message}\n{exc_info}',
            'style': '{',
        },
        # file_security: для записи в файл security.log сообщений, связанных с безопасностью.
        'file_security': {
            'format': '{asctime} {levelname} {module} {message}',
            'style': '{',
        },
        # mail: для отправки сообщений на почту.
        'mail': {
            'format': '{asctime} {levelname} {pathname} {message}',
            'style': '{',
        },
    },
    'filters': {
        # require_debug_true: фильтр для вывода в консоль только при DEBUG = True.
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',  # Фильтр для DEBUG = True
        },
        # require_debug_false: фильтр для записи в файл general.log и отправки на почту только при DEBUG = False.
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',  # Фильтр для DEBUG = False
        },
    },
    'handlers': {
        # Обработчики (handlers) console, console_warning, console_error:
        # для вывода в консоль с разными уровнями и форматами.
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'console_debug',
            'filters': ['require_debug_true'],
        },
        'console_warning': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'formatter': 'console_warning',
            'filters': ['require_debug_true'],
        },
        'console_error': {
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'console_error',
            'filters': ['require_debug_true'],
        },
        # Обработчики (handlers) file_general, file_errors, file_security:
        # для записи в соответствующие файлы.
        'file_general': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR /'logs/general.log',
            'formatter': 'file_general',
            'filters': ['require_debug_false'],
        },
        'file_errors': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR /'logs/errors.log',
            'formatter': 'file_errors',
        },
        'file_security': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR /'logs/security.log',
            'formatter': 'file_security',
        },
        # Обработчик (handler) mail_admins:
        # для отправки сообщений на почту.
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'mail',
            'filters': ['require_debug_false'],
        },
    },
    'loggers': {
        # django: основной регистратор (логгер), который обрабатывает все сообщения Django.
        'django': {
            'handlers': ['console', 'console_warning', 'console_error', 'file_general'],
            'level': 'DEBUG',
            'propagate': True,
        },
        # django.request, django.server, django.template, django.db.backends:
        # логгеры для обработки ошибок в соответствующих модулях.
        'django.request': {
            'handlers': ['file_errors', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['file_errors', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template': {
            'handlers': ['file_errors'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['file_errors'],
            'level': 'ERROR',
            'propagate': False,
        },
        # django.security: логгер для обработки сообщений, связанных с безопасностью.
        'django.security': {
            'handlers': ['file_security'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}